// @generated by protoc-gen-es v1.3.3 with parameter "target=ts,import_extension=.ts"
// @generated from file spec/response/chat_message_response.proto (package spec.response, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ChatMessageModel } from "../model/chat_message_model_pb.ts";
import { UserModel } from "../model/user_model_pb.ts";

/**
 *
 * メッセージ取得処理APIレスポンス
 *
 * @generated from message spec.response.ChatMessageResponse
 */
export class ChatMessageResponse extends Message<ChatMessageResponse> {
  /**
   * 【M】
   * メッセージ
   *
   * @generated from field: repeated spec.model.ChatMessageModel chat_message = 2;
   */
  chatMessage: ChatMessageModel[] = [];

  /**
   * 【O】
   * ユーザー情報
   *
   * @generated from field: spec.model.UserModel user = 3;
   */
  user?: UserModel;

  constructor(data?: PartialMessage<ChatMessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "spec.response.ChatMessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "chat_message", kind: "message", T: ChatMessageModel, repeated: true },
    { no: 3, name: "user", kind: "message", T: UserModel },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatMessageResponse {
    return new ChatMessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatMessageResponse {
    return new ChatMessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatMessageResponse {
    return new ChatMessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChatMessageResponse | PlainMessage<ChatMessageResponse> | undefined, b: ChatMessageResponse | PlainMessage<ChatMessageResponse> | undefined): boolean {
    return proto3.util.equals(ChatMessageResponse, a, b);
  }
}

